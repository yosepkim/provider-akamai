// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ResourceInitParameters struct {
	AggregationType *string `json:"aggregationType,omitempty" tf:"aggregation_type,omitempty"`

	ConstrainedProperty *string `json:"constrainedProperty,omitempty" tf:"constrained_property,omitempty"`

	DecayRate *float64 `json:"decayRate,omitempty" tf:"decay_rate,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	HostHeader *string `json:"hostHeader,omitempty" tf:"host_header,omitempty"`

	LeaderString *string `json:"leaderString,omitempty" tf:"leader_string,omitempty"`

	LeastSquaresDecay *float64 `json:"leastSquaresDecay,omitempty" tf:"least_squares_decay,omitempty"`

	LoadImbalancePercentage *float64 `json:"loadImbalancePercentage,omitempty" tf:"load_imbalance_percentage,omitempty"`

	MaxUMultiplicativeIncrement *float64 `json:"maxUMultiplicativeIncrement,omitempty" tf:"max_u_multiplicative_increment,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	ResourceInstance []ResourceInstanceInitParameters `json:"resourceInstance,omitempty" tf:"resource_instance,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	UpperBound *float64 `json:"upperBound,omitempty" tf:"upper_bound,omitempty"`

	WaitOnComplete *bool `json:"waitOnComplete,omitempty" tf:"wait_on_complete,omitempty"`
}

type ResourceInstanceInitParameters struct {
	DatacenterID *float64 `json:"datacenterId,omitempty" tf:"datacenter_id,omitempty"`

	LoadObject *string `json:"loadObject,omitempty" tf:"load_object,omitempty"`

	LoadObjectPort *float64 `json:"loadObjectPort,omitempty" tf:"load_object_port,omitempty"`

	LoadServers []*string `json:"loadServers,omitempty" tf:"load_servers,omitempty"`

	UseDefaultLoadObject *bool `json:"useDefaultLoadObject,omitempty" tf:"use_default_load_object,omitempty"`
}

type ResourceInstanceObservation struct {
	DatacenterID *float64 `json:"datacenterId,omitempty" tf:"datacenter_id,omitempty"`

	LoadObject *string `json:"loadObject,omitempty" tf:"load_object,omitempty"`

	LoadObjectPort *float64 `json:"loadObjectPort,omitempty" tf:"load_object_port,omitempty"`

	LoadServers []*string `json:"loadServers,omitempty" tf:"load_servers,omitempty"`

	UseDefaultLoadObject *bool `json:"useDefaultLoadObject,omitempty" tf:"use_default_load_object,omitempty"`
}

type ResourceInstanceParameters struct {

	// +kubebuilder:validation:Optional
	DatacenterID *float64 `json:"datacenterId" tf:"datacenter_id,omitempty"`

	// +kubebuilder:validation:Optional
	LoadObject *string `json:"loadObject,omitempty" tf:"load_object,omitempty"`

	// +kubebuilder:validation:Optional
	LoadObjectPort *float64 `json:"loadObjectPort,omitempty" tf:"load_object_port,omitempty"`

	// +kubebuilder:validation:Optional
	LoadServers []*string `json:"loadServers,omitempty" tf:"load_servers,omitempty"`

	// +kubebuilder:validation:Optional
	UseDefaultLoadObject *bool `json:"useDefaultLoadObject,omitempty" tf:"use_default_load_object,omitempty"`
}

type ResourceObservation struct {
	AggregationType *string `json:"aggregationType,omitempty" tf:"aggregation_type,omitempty"`

	ConstrainedProperty *string `json:"constrainedProperty,omitempty" tf:"constrained_property,omitempty"`

	DecayRate *float64 `json:"decayRate,omitempty" tf:"decay_rate,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	HostHeader *string `json:"hostHeader,omitempty" tf:"host_header,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	LeaderString *string `json:"leaderString,omitempty" tf:"leader_string,omitempty"`

	LeastSquaresDecay *float64 `json:"leastSquaresDecay,omitempty" tf:"least_squares_decay,omitempty"`

	LoadImbalancePercentage *float64 `json:"loadImbalancePercentage,omitempty" tf:"load_imbalance_percentage,omitempty"`

	MaxUMultiplicativeIncrement *float64 `json:"maxUMultiplicativeIncrement,omitempty" tf:"max_u_multiplicative_increment,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	ResourceInstance []ResourceInstanceObservation `json:"resourceInstance,omitempty" tf:"resource_instance,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	UpperBound *float64 `json:"upperBound,omitempty" tf:"upper_bound,omitempty"`

	WaitOnComplete *bool `json:"waitOnComplete,omitempty" tf:"wait_on_complete,omitempty"`
}

type ResourceParameters struct {

	// +kubebuilder:validation:Optional
	AggregationType *string `json:"aggregationType,omitempty" tf:"aggregation_type,omitempty"`

	// +kubebuilder:validation:Optional
	ConstrainedProperty *string `json:"constrainedProperty,omitempty" tf:"constrained_property,omitempty"`

	// +kubebuilder:validation:Optional
	DecayRate *float64 `json:"decayRate,omitempty" tf:"decay_rate,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// +kubebuilder:validation:Optional
	HostHeader *string `json:"hostHeader,omitempty" tf:"host_header,omitempty"`

	// +kubebuilder:validation:Optional
	LeaderString *string `json:"leaderString,omitempty" tf:"leader_string,omitempty"`

	// +kubebuilder:validation:Optional
	LeastSquaresDecay *float64 `json:"leastSquaresDecay,omitempty" tf:"least_squares_decay,omitempty"`

	// +kubebuilder:validation:Optional
	LoadImbalancePercentage *float64 `json:"loadImbalancePercentage,omitempty" tf:"load_imbalance_percentage,omitempty"`

	// +kubebuilder:validation:Optional
	MaxUMultiplicativeIncrement *float64 `json:"maxUMultiplicativeIncrement,omitempty" tf:"max_u_multiplicative_increment,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceInstance []ResourceInstanceParameters `json:"resourceInstance,omitempty" tf:"resource_instance,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	UpperBound *float64 `json:"upperBound,omitempty" tf:"upper_bound,omitempty"`

	// +kubebuilder:validation:Optional
	WaitOnComplete *bool `json:"waitOnComplete,omitempty" tf:"wait_on_complete,omitempty"`
}

// ResourceSpec defines the desired state of Resource
type ResourceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ResourceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ResourceInitParameters `json:"initProvider,omitempty"`
}

// ResourceStatus defines the observed state of Resource.
type ResourceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ResourceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Resource is the Schema for the Resources API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,akamai}
type Resource struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.aggregationType) || (has(self.initProvider) && has(self.initProvider.aggregationType))",message="spec.forProvider.aggregationType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.domain) || (has(self.initProvider) && has(self.initProvider.domain))",message="spec.forProvider.domain is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   ResourceSpec   `json:"spec"`
	Status ResourceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ResourceList contains a list of Resources
type ResourceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Resource `json:"items"`
}

// Repository type metadata.
var (
	Resource_Kind             = "Resource"
	Resource_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Resource_Kind}.String()
	Resource_KindAPIVersion   = Resource_Kind + "." + CRDGroupVersion.String()
	Resource_GroupVersionKind = CRDGroupVersion.WithKind(Resource_Kind)
)

func init() {
	SchemeBuilder.Register(&Resource{}, &ResourceList{})
}
