//go:build !ignore_autogenerated

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Domain) DeepCopyInto(out *Domain) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Domain.
func (in *Domain) DeepCopy() *Domain {
	if in == nil {
		return nil
	}
	out := new(Domain)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Domain) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DomainInitParameters) DeepCopyInto(out *DomainInitParameters) {
	*out = *in
	if in.CnameCoalescingEnabled != nil {
		in, out := &in.CnameCoalescingEnabled, &out.CnameCoalescingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Comment != nil {
		in, out := &in.Comment, &out.Comment
		*out = new(string)
		**out = **in
	}
	if in.Contract != nil {
		in, out := &in.Contract, &out.Contract
		*out = new(string)
		**out = **in
	}
	if in.DefaultErrorPenalty != nil {
		in, out := &in.DefaultErrorPenalty, &out.DefaultErrorPenalty
		*out = new(float64)
		**out = **in
	}
	if in.DefaultSSLClientCertificate != nil {
		in, out := &in.DefaultSSLClientCertificate, &out.DefaultSSLClientCertificate
		*out = new(string)
		**out = **in
	}
	if in.DefaultSSLClientPrivateKey != nil {
		in, out := &in.DefaultSSLClientPrivateKey, &out.DefaultSSLClientPrivateKey
		*out = new(string)
		**out = **in
	}
	if in.DefaultTimeoutPenalty != nil {
		in, out := &in.DefaultTimeoutPenalty, &out.DefaultTimeoutPenalty
		*out = new(float64)
		**out = **in
	}
	if in.EmailNotificationList != nil {
		in, out := &in.EmailNotificationList, &out.EmailNotificationList
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.EndUserMappingEnabled != nil {
		in, out := &in.EndUserMappingEnabled, &out.EndUserMappingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Group != nil {
		in, out := &in.Group, &out.Group
		*out = new(string)
		**out = **in
	}
	if in.LoadFeedback != nil {
		in, out := &in.LoadFeedback, &out.LoadFeedback
		*out = new(bool)
		**out = **in
	}
	if in.LoadImbalancePercentage != nil {
		in, out := &in.LoadImbalancePercentage, &out.LoadImbalancePercentage
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.SignAndServe != nil {
		in, out := &in.SignAndServe, &out.SignAndServe
		*out = new(bool)
		**out = **in
	}
	if in.SignAndServeAlgorithm != nil {
		in, out := &in.SignAndServeAlgorithm, &out.SignAndServeAlgorithm
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.WaitOnComplete != nil {
		in, out := &in.WaitOnComplete, &out.WaitOnComplete
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DomainInitParameters.
func (in *DomainInitParameters) DeepCopy() *DomainInitParameters {
	if in == nil {
		return nil
	}
	out := new(DomainInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DomainList) DeepCopyInto(out *DomainList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Domain, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DomainList.
func (in *DomainList) DeepCopy() *DomainList {
	if in == nil {
		return nil
	}
	out := new(DomainList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DomainList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DomainObservation) DeepCopyInto(out *DomainObservation) {
	*out = *in
	if in.CnameCoalescingEnabled != nil {
		in, out := &in.CnameCoalescingEnabled, &out.CnameCoalescingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Comment != nil {
		in, out := &in.Comment, &out.Comment
		*out = new(string)
		**out = **in
	}
	if in.Contract != nil {
		in, out := &in.Contract, &out.Contract
		*out = new(string)
		**out = **in
	}
	if in.DefaultErrorPenalty != nil {
		in, out := &in.DefaultErrorPenalty, &out.DefaultErrorPenalty
		*out = new(float64)
		**out = **in
	}
	if in.DefaultHealthMax != nil {
		in, out := &in.DefaultHealthMax, &out.DefaultHealthMax
		*out = new(float64)
		**out = **in
	}
	if in.DefaultHealthMultiplier != nil {
		in, out := &in.DefaultHealthMultiplier, &out.DefaultHealthMultiplier
		*out = new(float64)
		**out = **in
	}
	if in.DefaultHealthThreshold != nil {
		in, out := &in.DefaultHealthThreshold, &out.DefaultHealthThreshold
		*out = new(float64)
		**out = **in
	}
	if in.DefaultMaxUnreachablePenalty != nil {
		in, out := &in.DefaultMaxUnreachablePenalty, &out.DefaultMaxUnreachablePenalty
		*out = new(float64)
		**out = **in
	}
	if in.DefaultSSLClientCertificate != nil {
		in, out := &in.DefaultSSLClientCertificate, &out.DefaultSSLClientCertificate
		*out = new(string)
		**out = **in
	}
	if in.DefaultSSLClientPrivateKey != nil {
		in, out := &in.DefaultSSLClientPrivateKey, &out.DefaultSSLClientPrivateKey
		*out = new(string)
		**out = **in
	}
	if in.DefaultTimeoutPenalty != nil {
		in, out := &in.DefaultTimeoutPenalty, &out.DefaultTimeoutPenalty
		*out = new(float64)
		**out = **in
	}
	if in.DefaultUnreachableThreshold != nil {
		in, out := &in.DefaultUnreachableThreshold, &out.DefaultUnreachableThreshold
		*out = new(float64)
		**out = **in
	}
	if in.EmailNotificationList != nil {
		in, out := &in.EmailNotificationList, &out.EmailNotificationList
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.EndUserMappingEnabled != nil {
		in, out := &in.EndUserMappingEnabled, &out.EndUserMappingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Group != nil {
		in, out := &in.Group, &out.Group
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.LoadFeedback != nil {
		in, out := &in.LoadFeedback, &out.LoadFeedback
		*out = new(bool)
		**out = **in
	}
	if in.LoadImbalancePercentage != nil {
		in, out := &in.LoadImbalancePercentage, &out.LoadImbalancePercentage
		*out = new(float64)
		**out = **in
	}
	if in.MapUpdateInterval != nil {
		in, out := &in.MapUpdateInterval, &out.MapUpdateInterval
		*out = new(float64)
		**out = **in
	}
	if in.MaxProperties != nil {
		in, out := &in.MaxProperties, &out.MaxProperties
		*out = new(float64)
		**out = **in
	}
	if in.MaxResources != nil {
		in, out := &in.MaxResources, &out.MaxResources
		*out = new(float64)
		**out = **in
	}
	if in.MaxTTL != nil {
		in, out := &in.MaxTTL, &out.MaxTTL
		*out = new(float64)
		**out = **in
	}
	if in.MaxTestTimeout != nil {
		in, out := &in.MaxTestTimeout, &out.MaxTestTimeout
		*out = new(float64)
		**out = **in
	}
	if in.MinPingableRegionFraction != nil {
		in, out := &in.MinPingableRegionFraction, &out.MinPingableRegionFraction
		*out = new(float64)
		**out = **in
	}
	if in.MinTTL != nil {
		in, out := &in.MinTTL, &out.MinTTL
		*out = new(float64)
		**out = **in
	}
	if in.MinTestInterval != nil {
		in, out := &in.MinTestInterval, &out.MinTestInterval
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PingInterval != nil {
		in, out := &in.PingInterval, &out.PingInterval
		*out = new(float64)
		**out = **in
	}
	if in.PingPacketSize != nil {
		in, out := &in.PingPacketSize, &out.PingPacketSize
		*out = new(float64)
		**out = **in
	}
	if in.RoundRobinPrefix != nil {
		in, out := &in.RoundRobinPrefix, &out.RoundRobinPrefix
		*out = new(string)
		**out = **in
	}
	if in.ServermonitorLivenessCount != nil {
		in, out := &in.ServermonitorLivenessCount, &out.ServermonitorLivenessCount
		*out = new(float64)
		**out = **in
	}
	if in.ServermonitorLoadCount != nil {
		in, out := &in.ServermonitorLoadCount, &out.ServermonitorLoadCount
		*out = new(float64)
		**out = **in
	}
	if in.ServermonitorPool != nil {
		in, out := &in.ServermonitorPool, &out.ServermonitorPool
		*out = new(string)
		**out = **in
	}
	if in.SignAndServe != nil {
		in, out := &in.SignAndServe, &out.SignAndServe
		*out = new(bool)
		**out = **in
	}
	if in.SignAndServeAlgorithm != nil {
		in, out := &in.SignAndServeAlgorithm, &out.SignAndServeAlgorithm
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.WaitOnComplete != nil {
		in, out := &in.WaitOnComplete, &out.WaitOnComplete
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DomainObservation.
func (in *DomainObservation) DeepCopy() *DomainObservation {
	if in == nil {
		return nil
	}
	out := new(DomainObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DomainParameters) DeepCopyInto(out *DomainParameters) {
	*out = *in
	if in.CnameCoalescingEnabled != nil {
		in, out := &in.CnameCoalescingEnabled, &out.CnameCoalescingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Comment != nil {
		in, out := &in.Comment, &out.Comment
		*out = new(string)
		**out = **in
	}
	if in.Contract != nil {
		in, out := &in.Contract, &out.Contract
		*out = new(string)
		**out = **in
	}
	if in.DefaultErrorPenalty != nil {
		in, out := &in.DefaultErrorPenalty, &out.DefaultErrorPenalty
		*out = new(float64)
		**out = **in
	}
	if in.DefaultSSLClientCertificate != nil {
		in, out := &in.DefaultSSLClientCertificate, &out.DefaultSSLClientCertificate
		*out = new(string)
		**out = **in
	}
	if in.DefaultSSLClientPrivateKey != nil {
		in, out := &in.DefaultSSLClientPrivateKey, &out.DefaultSSLClientPrivateKey
		*out = new(string)
		**out = **in
	}
	if in.DefaultTimeoutPenalty != nil {
		in, out := &in.DefaultTimeoutPenalty, &out.DefaultTimeoutPenalty
		*out = new(float64)
		**out = **in
	}
	if in.EmailNotificationList != nil {
		in, out := &in.EmailNotificationList, &out.EmailNotificationList
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.EndUserMappingEnabled != nil {
		in, out := &in.EndUserMappingEnabled, &out.EndUserMappingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Group != nil {
		in, out := &in.Group, &out.Group
		*out = new(string)
		**out = **in
	}
	if in.LoadFeedback != nil {
		in, out := &in.LoadFeedback, &out.LoadFeedback
		*out = new(bool)
		**out = **in
	}
	if in.LoadImbalancePercentage != nil {
		in, out := &in.LoadImbalancePercentage, &out.LoadImbalancePercentage
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.SignAndServe != nil {
		in, out := &in.SignAndServe, &out.SignAndServe
		*out = new(bool)
		**out = **in
	}
	if in.SignAndServeAlgorithm != nil {
		in, out := &in.SignAndServeAlgorithm, &out.SignAndServeAlgorithm
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.WaitOnComplete != nil {
		in, out := &in.WaitOnComplete, &out.WaitOnComplete
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DomainParameters.
func (in *DomainParameters) DeepCopy() *DomainParameters {
	if in == nil {
		return nil
	}
	out := new(DomainParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DomainSpec) DeepCopyInto(out *DomainSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DomainSpec.
func (in *DomainSpec) DeepCopy() *DomainSpec {
	if in == nil {
		return nil
	}
	out := new(DomainSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DomainStatus) DeepCopyInto(out *DomainStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DomainStatus.
func (in *DomainStatus) DeepCopy() *DomainStatus {
	if in == nil {
		return nil
	}
	out := new(DomainStatus)
	in.DeepCopyInto(out)
	return out
}
