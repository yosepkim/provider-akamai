// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CertStatusInitParameters struct {
}

type CertStatusObservation struct {
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	ProductionStatus *string `json:"productionStatus,omitempty" tf:"production_status,omitempty"`

	StagingStatus *string `json:"stagingStatus,omitempty" tf:"staging_status,omitempty"`

	Target *string `json:"target,omitempty" tf:"target,omitempty"`
}

type CertStatusParameters struct {
}

type HostnamesInitParameters struct {
	CertProvisioningType *string `json:"certProvisioningType,omitempty" tf:"cert_provisioning_type,omitempty"`

	CertStatus []CertStatusInitParameters `json:"certStatus,omitempty" tf:"cert_status,omitempty"`

	CnameFrom *string `json:"cnameFrom,omitempty" tf:"cname_from,omitempty"`

	CnameTo *string `json:"cnameTo,omitempty" tf:"cname_to,omitempty"`

	CnameType *string `json:"cnameType,omitempty" tf:"cname_type,omitempty"`
}

type HostnamesObservation struct {
	CertProvisioningType *string `json:"certProvisioningType,omitempty" tf:"cert_provisioning_type,omitempty"`

	CertStatus []CertStatusObservation `json:"certStatus,omitempty" tf:"cert_status,omitempty"`

	CnameFrom *string `json:"cnameFrom,omitempty" tf:"cname_from,omitempty"`

	CnameTo *string `json:"cnameTo,omitempty" tf:"cname_to,omitempty"`

	CnameType *string `json:"cnameType,omitempty" tf:"cname_type,omitempty"`

	EdgeHostnameID *string `json:"edgeHostnameId,omitempty" tf:"edge_hostname_id,omitempty"`
}

type HostnamesParameters struct {

	// +kubebuilder:validation:Optional
	CertProvisioningType *string `json:"certProvisioningType" tf:"cert_provisioning_type,omitempty"`

	// +kubebuilder:validation:Optional
	CertStatus []CertStatusParameters `json:"certStatus,omitempty" tf:"cert_status,omitempty"`

	// +kubebuilder:validation:Optional
	CnameFrom *string `json:"cnameFrom" tf:"cname_from,omitempty"`

	// +kubebuilder:validation:Optional
	CnameTo *string `json:"cnameTo" tf:"cname_to,omitempty"`

	// +kubebuilder:validation:Optional
	CnameType *string `json:"cnameType,omitempty" tf:"cname_type,omitempty"`
}

type PropertyInitParameters struct {

	// Contract ID to be assigned to the Property
	ContractID *string `json:"contractId,omitempty" tf:"contract_id,omitempty"`

	// Group ID to be assigned to the Property
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	Hostnames []HostnamesInitParameters `json:"hostnames,omitempty" tf:"hostnames,omitempty"`

	// Name to give to the Property (must be unique)
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Product ID to be assigned to the Property
	ProductID *string `json:"productId,omitempty" tf:"product_id,omitempty"`

	// Property ID
	PropertyID *string `json:"propertyId,omitempty" tf:"property_id,omitempty"`

	// Specify the rule format version (defaults to latest version available when created)
	RuleFormat *string `json:"ruleFormat,omitempty" tf:"rule_format,omitempty"`

	// Property Rules as JSON
	Rules *string `json:"rules,omitempty" tf:"rules,omitempty"`

	// Property version notes
	VersionNotes *string `json:"versionNotes,omitempty" tf:"version_notes,omitempty"`
}

type PropertyObservation struct {

	// Contract ID to be assigned to the Property
	ContractID *string `json:"contractId,omitempty" tf:"contract_id,omitempty"`

	// Group ID to be assigned to the Property
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	Hostnames []HostnamesObservation `json:"hostnames,omitempty" tf:"hostnames,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Property's current latest version number
	LatestVersion *float64 `json:"latestVersion,omitempty" tf:"latest_version,omitempty"`

	// Name to give to the Property (must be unique)
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Product ID to be assigned to the Property
	ProductID *string `json:"productId,omitempty" tf:"product_id,omitempty"`

	// Property's version currently activated in production (zero when not active in production)
	ProductionVersion *float64 `json:"productionVersion,omitempty" tf:"production_version,omitempty"`

	// Property ID
	PropertyID *string `json:"propertyId,omitempty" tf:"property_id,omitempty"`

	// Required property's version to be read
	ReadVersion *float64 `json:"readVersion,omitempty" tf:"read_version,omitempty"`

	RuleErrors []RuleErrorsObservation `json:"ruleErrors,omitempty" tf:"rule_errors,omitempty"`

	// Specify the rule format version (defaults to latest version available when created)
	RuleFormat *string `json:"ruleFormat,omitempty" tf:"rule_format,omitempty"`

	// Rule validation warnings
	RuleWarnings []RuleWarningsObservation `json:"ruleWarnings,omitempty" tf:"rule_warnings,omitempty"`

	// Property Rules as JSON
	Rules *string `json:"rules,omitempty" tf:"rules,omitempty"`

	// Property's version currently activated in staging (zero when not active in staging)
	StagingVersion *float64 `json:"stagingVersion,omitempty" tf:"staging_version,omitempty"`

	// Property version notes
	VersionNotes *string `json:"versionNotes,omitempty" tf:"version_notes,omitempty"`
}

type PropertyParameters struct {

	// Contract ID to be assigned to the Property
	// +kubebuilder:validation:Optional
	ContractID *string `json:"contractId,omitempty" tf:"contract_id,omitempty"`

	// Group ID to be assigned to the Property
	// +kubebuilder:validation:Optional
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// +kubebuilder:validation:Optional
	Hostnames []HostnamesParameters `json:"hostnames,omitempty" tf:"hostnames,omitempty"`

	// Name to give to the Property (must be unique)
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Product ID to be assigned to the Property
	// +kubebuilder:validation:Optional
	ProductID *string `json:"productId,omitempty" tf:"product_id,omitempty"`

	// Property ID
	// +kubebuilder:validation:Optional
	PropertyID *string `json:"propertyId,omitempty" tf:"property_id,omitempty"`

	// Specify the rule format version (defaults to latest version available when created)
	// +kubebuilder:validation:Optional
	RuleFormat *string `json:"ruleFormat,omitempty" tf:"rule_format,omitempty"`

	// Property Rules as JSON
	// +kubebuilder:validation:Optional
	Rules *string `json:"rules,omitempty" tf:"rules,omitempty"`

	// Property version notes
	// +kubebuilder:validation:Optional
	VersionNotes *string `json:"versionNotes,omitempty" tf:"version_notes,omitempty"`
}

type RuleErrorsInitParameters struct {
}

type RuleErrorsObservation struct {
	BehaviorName *string `json:"behaviorName,omitempty" tf:"behavior_name,omitempty"`

	Detail *string `json:"detail,omitempty" tf:"detail,omitempty"`

	ErrorLocation *string `json:"errorLocation,omitempty" tf:"error_location,omitempty"`

	Instance *string `json:"instance,omitempty" tf:"instance,omitempty"`

	StatusCode *float64 `json:"statusCode,omitempty" tf:"status_code,omitempty"`

	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type RuleErrorsParameters struct {
}

type RuleWarningsInitParameters struct {
}

type RuleWarningsObservation struct {
	BehaviorName *string `json:"behaviorName,omitempty" tf:"behavior_name,omitempty"`

	Detail *string `json:"detail,omitempty" tf:"detail,omitempty"`

	ErrorLocation *string `json:"errorLocation,omitempty" tf:"error_location,omitempty"`

	Instance *string `json:"instance,omitempty" tf:"instance,omitempty"`

	StatusCode *float64 `json:"statusCode,omitempty" tf:"status_code,omitempty"`

	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type RuleWarningsParameters struct {
}

// PropertySpec defines the desired state of Property
type PropertySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PropertyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PropertyInitParameters `json:"initProvider,omitempty"`
}

// PropertyStatus defines the observed state of Property.
type PropertyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PropertyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Property is the Schema for the Propertys API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,akamai}
type Property struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.contractId) || (has(self.initProvider) && has(self.initProvider.contractId))",message="spec.forProvider.contractId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.groupId) || (has(self.initProvider) && has(self.initProvider.groupId))",message="spec.forProvider.groupId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.productId) || (has(self.initProvider) && has(self.initProvider.productId))",message="spec.forProvider.productId is a required parameter"
	Spec   PropertySpec   `json:"spec"`
	Status PropertyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PropertyList contains a list of Propertys
type PropertyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Property `json:"items"`
}

// Repository type metadata.
var (
	Property_Kind             = "Property"
	Property_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Property_Kind}.String()
	Property_KindAPIVersion   = Property_Kind + "." + CRDGroupVersion.String()
	Property_GroupVersionKind = CRDGroupVersion.WithKind(Property_Kind)
)

func init() {
	SchemeBuilder.Register(&Property{}, &PropertyList{})
}
